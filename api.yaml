openapi: 3.0.0
x-runtime:
  httpserver:
    address: ":8080"
  logger:
    level: "INFO"
    output: "STDOUT"
  stats:
    output: "DATADOG"
    datadog:
      address: "statsd:8125"
      flushinterval: "10s"
  signals:
    installed:
      - "OS"
    os:
      signals:
        - 2 # SIGINT
        - 15 # SIGTERM
  connstate:
    reportinterval: "5s"
    hijackedcounter: "http.server.connstate.hijacked"
    closedcounter: "http.server.connstate.closed"
    idlegauge: "http.server.connstate.idle.gauge"
    idlecounter: "http.server.connstate.idle"
    activegauge: "http.server.connstate.active.gauge"
    activecounter: "http.server.connstate.active"
    newgauge: "http.server.connstate.new.gauge"
    newcounter: "http.server.connstate.new"
x-transportd:
  backends:
    - app
  app:
    host: "http://app:8081"
    pool:
      ttl: "24h"
      count: 1
info:
  version: 1.0.0
  title: "Asset Inventory API"
  description: "An API service to store and retreive asset inventory information"
  contact:
    name: Security Development
    email: secdev-external@atlassian.com
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
paths:
  /healthcheck:
    get:
      description: "Liveness check."
      responses:
        "200":
          description: "Success."
      x-transportd:
        backend: app
  /cloud/change:
    post:
      summary: "Catalog a new asset change"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloudAssetChanges'
      responses:
        201:
          description: "A new entry was created"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-transportd:
        backend: app
        enabled:
          - "metrics"
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "lambda"
        lambda:
          arn: "insert"
          async: false
          request: '#! json .Request.Body !#'
          success: '{"status": 201, "bodyPassthrough": true}'
          error: '{"status": #! if eq .Response.Body.errorType "InvalidInput" !# 400 #! else !# 500 #! end !#, "bodyPassthrough": true}'
components:
  schemas:
    CloudAssetChanges:
      type: object
      properties:
        changes:
          type: array
          items:
            $ref: "#/components/schemas/CloudAssetChange"
        changeTime:
          type: string
          format: date-time
        resourceType:
          type: string
        accountId:
          type: string
        region:
          type: string
        resourceId:
          type: string
        tags:
          type: object
          additionalProperties:
            type: string
      required:
      - changes
      - changeTime
      - resourceType
      - accountId
      - region
      - resourceId
    CloudAssetChange:
      type: object
      properties:
        privateIpAddresses:
          type: array
          items:
            type: string
        publicIpAddresses:
          type: array
          items:
            type: string
        hostnames:
          type: array
          items:
            type: string
        changeType:
          type: string
          enum: [ADDED, DELETED]
      required:
      - changeType
    Error:
      type: object
      properties:
        errorMessage:
          type: string
        errorType:
          type: string
        stackTrace:
          type: array
          items:
            type: string
