openapi: 3.0.0
x-runtime:
  httpserver:
    address: ":8080"
  logger:
    level: "INFO"
    output: "STDOUT"
  stats:
    output: "NULL"
  signals:
    installed:
      - "OS"
    os:
      signals:
        - 2 # SIGINT
        - 15 # SIGTERM
  connstate:
    reportinterval: "5s"
    hijackedcounter: "http.server.connstate.hijacked"
    closedcounter: "http.server.connstate.closed"
    idlegauge: "http.server.connstate.idle.gauge"
    idlecounter: "http.server.connstate.idle"
    activegauge: "http.server.connstate.active.gauge"
    activecounter: "http.server.connstate.active"
    newgauge: "http.server.connstate.new.gauge"
    newcounter: "http.server.connstate.new"
x-transportd:
  backends:
    - app
  app:
    host: "http://app:8081"
    pool:
      ttl: "24h"
      count: 1
info:
  version: 1.0.0
  title: "Asset Inventory API"
  description: "An API service to store and retreive asset inventory information"
  contact:
    name: Security Development
    email: secdev-external@atlassian.com
  license:
    name: Apache 2.0
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
paths:
  /healthcheck:
    get:
      description: "Liveness check."
      responses:
        "200":
          description: "Success."
      x-transportd:
        backend: app
  /v1/cloud/change:
    post:
      summary: "Catalog a new cloud asset change"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CloudAssetChanges"
      responses:
        201:
          description: "A new entry was created"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-transportd:
        backend: app
        enabled:
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "timeout"
          - "lambda"
        timeout:
          after: "5s"
        lambda:
          arn: "insert"
          async: false
          request: "#! json .Request.Body !#"
          success: '{"status": 201, "bodyPassthrough": true}'
          error: '{"status":
            #! if eq .Response.Body.errorType "InvalidInput" !# 400
            #! else !# 500
            #! end !#, "bodyPassthrough": true}'
  /v1/cloud/asset:
    get:
      summary: "Retrieve a list of known cloud assets at point in time in reverse order by time (newest to oldest) split into pages of 'count' items."
      parameters:
        - name: "time"
          in: "query"
          description: "The point in time for the first page of results to fetch"
          required: true
          schema:
            type: "string"
            format: "date-time" # RFC3339Nano format
        - name: "count"
          in: "query"
          description: "Maximum number of matching cloud assets to return per page. 100 by default"
          required: false
          schema:
            type: "integer"
            minimum: 1
            default: 100
        - name: "type"
          in: "query"
          description: "AWS resource type. Currently supported values: AWS::EC2::Instance, AWS::ElasticLoadBalancing::LoadBalancer, AWS::ElasticLoadBalancingV2::LoadBalancer"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: "First page of the list of all assets found at the given time, limited to count"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkCloudAssets"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: "The asset is not found"
      x-transportd:
        backend: app
        enabled:
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "timeout"
          - "lambda"
        timeout:
          after: "5s"
        lambda:
          arn: "fetchAllAssetsByTime"
          async: false
          request: >
            {
              "time": "#!index .Request.Query.time 0!#",
              "count": #!if .Request.Query.count !# #!index .Request.Query.count 0!# #! else !# 100 #! end !# ,
              "type": "#!index .Request.Query.type 0!#"
            }
          success: '{"status": 200, "bodyPassthrough": true}'
          error: >
            {
              "status":
              #! if eq .Response.Body.errorType "InvalidInput" !# 400,
              #! else !#
              #! if eq .Response.Body.errorType "NotFound" !# 404,
              #! else !# 500,
              #! end !#
              #! end !#
              "bodyPassthrough": true
            }
  /v1/cloud/bulk/{PageToken}:
    get:
      summary: "Retrieve the next page of bulk cloud assets at point in time in reverse order by time (newest to oldest)"
      parameters:
        - name: "PageToken"
          in: "path"
          description: "The token for the page in the list provided by a previous cloud asset fetch call"
          required: true
          schema:
            type: "string"
      responses:
        200:
          description: "The page from the list of all assets found at the given time"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkCloudAssets"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: "The asset is not found"
      x-transportd:
        backend: app
        enabled:
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "timeout"
          - "lambda"
        timeout:
          after: "5s"
        lambda:
          arn: "fetchMoreAssetsByPageToken"
          async: false
          request: >
            {
              "pageToken": "#!.Request.URL.PageToken!#"
            }
          success: '{"status": 200, "bodyPassthrough": true}'
          error: >
            {
              "status":
              #! if eq .Response.Body.errorType "InvalidInput" !# 400,
              #! else !#
              #! if eq .Response.Body.errorType "NotFound" !# 404,
              #! else !# 500,
              #! end !#
              #! end !#
              "bodyPassthrough": true
            }
  /v1/cloud/ip/{ipAddress}:
    get:
      summary: "Retrieve a cloud asset at a point in time by IP Address"
      parameters:
        - name: "ipAddress"
          in: "path"
          description: "The IP address of the asset"
          required: true
          schema:
            $ref: "#/components/schemas/IPv4Address"
        - name: "time"
          in: "query"
          description: "The point in time details for a given asset"
          required: true
          schema:
            type: "string"
            format: "date-time" # RFC3339Nano format
      responses:
        200:
          description: "List of all assets found with the IP address at the given time"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudAssets"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: "The asset is not found"
      x-transportd:
        backend: app
        enabled:
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "timeout"
          - "lambda"
        timeout:
          after: "5s"
        lambda:
          arn: "fetchByIP"
          async: false
          request: >
            {
              "ipAddress": "#!.Request.URL.ipAddress!#",
              "time": "#!index .Request.Query.time 0!#"
            }
          success: '{"status": 200, "bodyPassthrough": true}'
          error: >
            {
              "status":
              #! if eq .Response.Body.errorType "InvalidInput" !# 400,
              #! else !#
              #! if eq .Response.Body.errorType "NotFound" !# 404,
              #! else !# 500,
              #! end !#
              #! end !#
              "bodyPassthrough": true
            }
  /v1/cloud/hostname/{hostname}:
    get:
      summary: "Retrieve a cloud asset at a point in time by hostname"
      parameters:
        - name: "hostname"
          in: "path"
          description: "The hostname of the asset"
          required: true
          schema:
            type: "string"
        - name: "time"
          in: "query"
          description: "The point in time details for a given asset"
          required: true
          schema:
            type: "string"
            format: "date-time" # RFC3339Nano format
      responses:
        200:
          description: "List of all assets found with the hostname at the given time"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudAssets"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: "The asset is not found"
      x-transportd:
        backend: app
        enabled:
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "timeout"
          - "lambda"
        timeout:
          after: "5s"
        lambda:
          arn: "fetchByHostname"
          async: false
          request: >
            {
              "hostname": "#!.Request.URL.hostname!#",
              "time": "#!index .Request.Query.time 0!#"
            }
          success: '{"status": 200, "bodyPassthrough": true}'
          error: >
            {
              "status":
              #! if eq .Response.Body.errorType "InvalidInput" !# 400,
              #! else !#
              #! if eq .Response.Body.errorType "NotFound" !# 404,
              #! else !# 500,
              #! end !#
              #! end !#
              "bodyPassthrough": true
            }
  /v1/cloud/arnid/{resourceid}:
    get:
      summary: "Retrieve a cloud asset at a point in time by ARN ID"
      parameters:
        - name: "resourceid"
          in: "path"
          description: "The resource id of the asset"
          required: true
          schema:
            type: "string"
        - name: "time"
          in: "query"
          description: "The point in time details for a given asset"
          required: true
          schema:
            type: "string"
            format: "date-time" # RFC3339Nano format
      responses:
        200:
          description: "List of all assets found with the ARN ID at the given time"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudAssets"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: "The asset is not found"
      x-transportd:
        backend: app
        enabled:
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "timeout"
          - "lambda"
        timeout:
          after: "5s"
        lambda:
          arn: "fetchByResourceID"
          async: false
          request: >
            {
              "resourceid": "#!.Request.URL.resourceid!#",
              "time": "#!index .Request.Query.time 0!#"
            }
          success: '{"status": 200, "bodyPassthrough": true}'
          error: >
            {
              "status":
              #! if eq .Response.Body.errorType "InvalidInput" !# 400,
              #! else !#
              #! if eq .Response.Body.errorType "NotFound" !# 404,
              #! else !# 500,
              #! end !#
              #! end !#
              "bodyPassthrough": true
            }
  /v1/cloud/resourceid/{resourceid}:
    get:
      summary: "Retrieve a cloud asset at a point in time by resource ID"
      parameters:
        - name: "resourceid"
          in: "path"
          description: "The resource id of the asset"
          required: true
          schema:
            type: "string"
        - name: "time"
          in: "query"
          description: "The point in time details for a given asset"
          required: true
          schema:
            type: "string"
            format: "date-time" # RFC3339Nano format
      responses:
        200:
          description: "List of all assets found with the resource ID at the given time"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CloudAssets"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: "The asset is not found"
      x-transportd:
        backend: app
        enabled:
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "timeout"
          - "lambda"
        timeout:
          after: "5s"
        lambda:
          arn: "fetchByResourceID"
          async: false
          request: >
            {
              "resourceid": "#!.Request.URL.resourceid!#",
              "time": "#!index .Request.Query.time 0!#"
            }
          success: '{"status": 200, "bodyPassthrough": true}'
          error: >
            {
              "status":
              #! if eq .Response.Body.errorType "InvalidInput" !# 400,
              #! else !#
              #! if eq .Response.Body.errorType "NotFound" !# 404,
              #! else !# 500,
              #! end !#
              #! end !#
              "bodyPassthrough": true
            }
  /ops/pgsql/v1/schema/version/stepUp:
    get:
      summary: "Migrate database schema one version up"
      description: "Allows to perform schema migrations separately from deployments"
      responses:
        200:
          description: "Resulting Schema Version"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaVersion"
      x-transportd:
        backend: app
        enabled:
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "lambda"
        lambda:
          arn: "schemaVersionStepUp"
          async: false
          success: '{"status": 200, "bodyPassthrough": true}'
          error: '{"status": 500, "bodyPassthrough": true}'
  /ops/pgsql/v1/schema/version/stepDown:
    get:
      summary: "Migrate database schema one version down"
      description: "Allows to perform schema migrations separately from deployments"
      responses:
        200:
          description: "Resulting Schema Version"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaVersion"
      x-transportd:
        backend: app
        enabled:
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "lambda"
        lambda:
          arn: "schemaVersionStepDown"
          async: false
          success: '{"status": 200, "bodyPassthrough": true}'
          error: '{"status": 500, "bodyPassthrough": true}'
  /ops/pgsql/v1/schema/version/backgroundUp:
    get:
      summary: "Migrate database schema one version up asynchronously"
      description: "Allows to perform long-running schema migrations separately from deployments"
      responses:
        201:
          description: "Background schema migration started"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-transportd:
        backend: app
        enabled:
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "lambda"
        lambda:
          arn: "schemaVersionStepUp"
          async: true
          success: '{"status": 201, "bodyPassthrough": true}'
          error: '{"status":
            #! if eq .Response.Body.errorType "InvalidInput" !# 400
            #! else !# 500
            #! end !#, "bodyPassthrough": true}'
  /ops/pgsql/v1/schema/version/backgroundDown:
    get:
      summary: "Migrate database schema one version down asynchronously"
      description: "Allows to perform long-running schema migrations separately from deployments"
      responses:
        201:
          description: "Background schema migration started"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      x-transportd:
        backend: app
        enabled:
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "lambda"
        lambda:
          arn: "schemaVersionStepDown"
          async: true
          success: '{"status": 201, "bodyPassthrough": true}'
          error: '{"status":
            #! if eq .Response.Body.errorType "InvalidInput" !# 400
            #! else !# 500
            #! end !#, "bodyPassthrough": true}'
  /ops/pgsql/v1/schema/version/force:
    post:
      summary: "BE CAREFUL! Force database schema version."
      description: "Force the schema version to the specified value, and clear dirty flag. Use ONLY to recover from failed migrations."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SchemaVersion"
      responses:
        201:
          description: "Completed successfully"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-transportd:
        backend: app
        enabled:
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "lambda"
        lambda:
          arn: "forceSchemaVersion"
          async: false
          request: "#! json .Request.Body !#"
          success: '{"status": 201, "bodyPassthrough": true}'
          error: '{"status":
            #! if eq .Response.Body.errorType "InvalidInput" !# 400
            #! else !# 500
            #! end !#, "bodyPassthrough": true}'
  /ops/pgsql/v1/schema/version:
    get:
      summary: "Get currently used database schema version"
      description: "Allows to discover the current state of database schema for the specific deployment"
      responses:
        200:
          description: "Schema State"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaState"
      x-transportd:
        backend: app
        enabled:
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "lambda"
        lambda:
          arn: "getSchemaVersion"
          async: false
          success: '{"status": 200, "bodyPassthrough": true}'
          error: '{"status": 500, "bodyPassthrough": true}'
  /ops/pgsql/v1/partitions:
    post:
      summary: "Create a new partition"
      description: "This is an endpoint to administer changes to the partitions in the postgres database. Calling without a timestamp will create the next time based partition in the sequence. Calling with a timestamp will create a new partition for that timestamp."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePartitionInput"
      responses:
        204:
          description: "Partition created"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: "Requested partition overlaps with an existing partition"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-transportd:
        backend: app
        enabled:
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "lambda"
        lambda:
          arn: "createPartition"
          async: false
          request: "#! json .Request.Body !#"
          success: '{"status": 204}'
          error: >
            {
              "status":
              #! if eq .Response.Body.errorType "InvalidInput" !# 400,
              #! else !#
              #! if eq .Response.Body.errorType "ParitionConflict" !# 409,
              #! else !# 500,
              #! end !#
              #! end !#
              "bodyPassthrough": true
            }
    get:
      summary: "Get all partitions"
      description: "This is an endpoint to view all active partitions and their record counts."
      responses:
        200:
          description: "Active partitions"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Partitions"
      x-transportd:
        backend: app
        enabled:
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "lambda"
        lambda:
          arn: "getPartitions"
          async: false
          success: '{"status": 200, "bodyPassthrough": true}'
          error: '{"status": 500, "bodyPassthrough": true}'
    delete:
      summary: "Delete a specific partition"
      description: "This is an endpoint to delete partitions specified by partition name."
      parameters:
        - name: name
          in: query
          description: "The name of the partition to delete."
          required: true
          schema:
            type: string
      responses:
        204:
          description: "Successfully deleted"
        404:
          description: "The partition is not found"
      x-transportd:
        backend: app
        enabled:
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "lambda"
        lambda:
          arn: "deletePartitions"
          async: false
          request: >
            {
              "name": "#!index .Request.Query.name 0!#"
            }
          success: '{"status": 204}'
          error: >
            {
              "status":
                #! if eq .Response.Body.errorType "NotFoundPartition" !# 404,
                #! else !# 500,
                #! end !#
                "bodyPassthrough": true
            }
  /ops/pgsql/v1/backfill:
    get:
      summary: "Initiate back-fill of existing events from old schema to new"
      parameters:
        - name: "from"
          in: "query"
          description: "The point in time to start back-fill from"
          required: true
          schema:
            type: "string"
            format: "date-time" # RFC3339Nano format
        - name: "to"
          in: "query"
          description: "The point in time to start back-fill from"
          required: true
          schema:
            type: "string"
            format: "date-time" # RFC3339Nano format
      responses:
        201:
          description: "Back-fill completed successfully"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-transportd:
        backend: app
        enabled:
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "lambda"
        lambda:
          arn: "backFillLocally"
          async: false
          request: >
            {
              "from": "#!index .Request.Query.from 0!#",
              "to": "#!index .Request.Query.to 0!#"
            }
          success: '{"status": 201, "bodyPassthrough": true}'
          error: '{"status":
            #! if eq .Response.Body.errorType "InvalidInput" !# 400
            #! else !# 500
            #! end !#, "bodyPassthrough": true}'
  /v1/account/owner:
    post:
      summary: "Update or insert an AWS account with its owner and account champions"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetAccountOwner"
      responses:
        201:
          description: "An AWS account with its owner and champions are inserted or updated"
        400:
          description: "Invalid input"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
      x-transportd:
        backend: app
        enabled:
          - "accesslog"
          - "requestvalidation"
          - "responsevalidation"
          - "timeout"
          - "lambda"
        timeout:
          after: "5s"
        lambda:
          arn: "insertAccountOwner"
          async: false
          request: "#! json .Request.Body !#"
          success: '{"status": 201, "bodyPassthrough": true}'
          error: '{"status":
            #! if eq .Response.Body.errorType "InvalidInput" !# 400
            #! else !# 500
            #! end !#, "bodyPassthrough": true}'
components:
  schemas:
    CloudAssetChanges:
      type: object
      properties:
        changes:
          type: array
          items:
            $ref: "#/components/schemas/CloudAssetChange"
        changeTime:
          type: string
          format: date-time
        resourceType:
          type: string
        accountId:
          type: string
        region:
          type: string
        arn:
          type: string
        tags:
          type: object
          additionalProperties:
            type: string
      required:
        - changes
        - changeTime
        - resourceType
        - accountId
        - region
        - arn
    CloudAssetChange:
      type: object
      properties:
        privateIpAddresses:
          type: array
          items:
            $ref: "#/components/schemas/IPv4Address"
        publicIpAddresses:
          type: array
          items:
            $ref: "#/components/schemas/IPv4Address"
        hostnames:
          type: array
          items:
            type: string
        relatedResources:
          type: array
          items:
            type: string
        changeType:
          type: string
          enum: [ADDED, DELETED]
      required:
        - changeType
    BulkCloudAssets:
      type: object
      properties:
        nextPageToken:
          type: string
        response:
          type: array
          items:
            $ref: "#/components/schemas/CloudAssetDetails"
    CloudAssets:
      type: object
      required:
        - assets
      additionalProperties: false
      properties:
        assets:
          type: array
          items:
            $ref: "#/components/schemas/CloudAssetDetails"
    CloudAssetDetails:
      type: object
      required:
        - resourceType
        - accountId
        - region
        - arn
      properties:
        privateIpAddresses:
          type: array
          items:
            type: string
        publicIpAddresses:
          type: array
          items:
            type: string
        hostnames:
          type: array
          items:
            type: string
        resourceType:
          type: string
        accountId:
          type: string
        region:
          type: string
        arn:
          type: string
        tags:
          type: object
          additionalProperties:
            type: string
        accountOwner:
          $ref: "#/components/schemas/AccountOwner"
    Partitions:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/Partition"
    Partition:
      type: object
      properties:
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        begin:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        count:
          type: number
    CreatePartitionInput:
      type: object
      properties:
        begin:
          type: string
          format: date-time
        days:
          type: integer
    DeletedPartitions:
      type: object
      properties:
        deleted:
          type: integer
    SchemaVersion:
      type: object
      properties:
        version:
          type: integer
    SchemaState:
      type: object
      properties:
        version:
          type: integer
        dirty:
          type: boolean
    AccountOwner:
      type: object
      properties:
        accountId:
          type: string
        owner:
          $ref: "#/components/schemas/Person"
        champions:
          type: array
          items:
            $ref: "#/components/schemas/Person"
    Person:
      type: object
      properties:
        name:
          type: string
        login:
          type: string
        email:
          type: string
        valid:
          type: boolean
    SetAccountOwner:
      type: object
      properties:
        accountId:
          type: string
          pattern: ^(\d{12})$
        owner:
          $ref: "#/components/schemas/SetPerson"
        champions:
          type: array
          items:
            $ref: "#/components/schemas/SetPerson"
      required:
        - accountId
        - owner
    SetPerson:
      type: object
      properties:
        name:
          type: string
        login:
          type: string
          minLength: 1
        email:
          type: string
          pattern: ^([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)$
        valid:
          type: boolean
      required:
        - login
        - email
    IPv4Address:
      type: string
      format: ipv4 # eventually openapi will support this properly https://github.com/swagger-api/swagger-ui/issues/4986
      # until then, this monstrosity is our only hope, follow the link below for more visual representation of regex
      # https://regexper.com/#%5E%28%3F%3A%28%3F%3A25%5B0-5%5D%7C2%5B0-4%5D%5B0-9%5D%7C%5B01%5D%3F%5B0-9%5D%5B0-9%5D%3F%29%5C.%29%7B3%7D%28%3F%3A25%5B0-5%5D%7C2%5B0-4%5D%5B0-9%5D%7C%5B01%5D%3F%5B0-9%5D%5B0-9%5D%3F%29%24
      pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$
    Error:
      type: object
      properties:
        errorMessage:
          type: string
        errorType:
          type: string
        stackTrace:
          type: array
          items:
            type: string
