// Automatically generated by MockGen. DO NOT EDIT!
// Source: ./pkg/domain/storage.go

package v1

import (
	context "context"
	"github.com/asecurityteam/asset-inventory-api/pkg/domain"
	gomock "github.com/golang/mock/gomock"
	time "time"
)

// Mock of PartitionGenerator interface
type MockPartitionGenerator struct {
	ctrl     *gomock.Controller
	recorder *_MockPartitionGeneratorRecorder
}

// Recorder for MockPartitionGenerator (not exported)
type _MockPartitionGeneratorRecorder struct {
	mock *MockPartitionGenerator
}

func NewMockPartitionGenerator(ctrl *gomock.Controller) *MockPartitionGenerator {
	mock := &MockPartitionGenerator{ctrl: ctrl}
	mock.recorder = &_MockPartitionGeneratorRecorder{mock}
	return mock
}

func (_m *MockPartitionGenerator) EXPECT() *_MockPartitionGeneratorRecorder {
	return _m.recorder
}

func (_m *MockPartitionGenerator) GeneratePartition(_param0 context.Context, _param1 time.Time, _param2 int) error {
	ret := _m.ctrl.Call(_m, "GeneratePartition", _param0, _param1, _param2)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPartitionGeneratorRecorder) GeneratePartition(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GeneratePartition", arg0, arg1, arg2)
}

// Mock of PartitionsGetter interface
type MockPartitionsGetter struct {
	ctrl     *gomock.Controller
	recorder *_MockPartitionsGetterRecorder
}

// Recorder for MockPartitionsGetter (not exported)
type _MockPartitionsGetterRecorder struct {
	mock *MockPartitionsGetter
}

func NewMockPartitionsGetter(ctrl *gomock.Controller) *MockPartitionsGetter {
	mock := &MockPartitionsGetter{ctrl: ctrl}
	mock.recorder = &_MockPartitionsGetterRecorder{mock}
	return mock
}

func (_m *MockPartitionsGetter) EXPECT() *_MockPartitionsGetterRecorder {
	return _m.recorder
}

func (_m *MockPartitionsGetter) GetPartitions(_param0 context.Context) ([]domain.Partition, error) {
	ret := _m.ctrl.Call(_m, "GetPartitions", _param0)
	ret0, _ := ret[0].([]domain.Partition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPartitionsGetterRecorder) GetPartitions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPartitions", arg0)
}

// Mock of PartitionsDeleter interface
type MockPartitionsDeleter struct {
	ctrl     *gomock.Controller
	recorder *_MockPartitionsDeleterRecorder
}

// Recorder for MockPartitionsDeleter (not exported)
type _MockPartitionsDeleterRecorder struct {
	mock *MockPartitionsDeleter
}

func NewMockPartitionsDeleter(ctrl *gomock.Controller) *MockPartitionsDeleter {
	mock := &MockPartitionsDeleter{ctrl: ctrl}
	mock.recorder = &_MockPartitionsDeleterRecorder{mock}
	return mock
}

func (_m *MockPartitionsDeleter) EXPECT() *_MockPartitionsDeleterRecorder {
	return _m.recorder
}

func (_m *MockPartitionsDeleter) DeletePartitions(_param0 context.Context, _param1 int) (int, error) {
	ret := _m.ctrl.Call(_m, "DeletePartitions", _param0, _param1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPartitionsDeleterRecorder) DeletePartitions(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeletePartitions", arg0, arg1)
}

// Mock of CloudAssetStorer interface
type MockCloudAssetStorer struct {
	ctrl     *gomock.Controller
	recorder *_MockCloudAssetStorerRecorder
}

// Recorder for MockCloudAssetStorer (not exported)
type _MockCloudAssetStorerRecorder struct {
	mock *MockCloudAssetStorer
}

func NewMockCloudAssetStorer(ctrl *gomock.Controller) *MockCloudAssetStorer {
	mock := &MockCloudAssetStorer{ctrl: ctrl}
	mock.recorder = &_MockCloudAssetStorerRecorder{mock}
	return mock
}

func (_m *MockCloudAssetStorer) EXPECT() *_MockCloudAssetStorerRecorder {
	return _m.recorder
}

func (_m *MockCloudAssetStorer) Store(_param0 context.Context, _param1 domain.CloudAssetChanges) error {
	ret := _m.ctrl.Call(_m, "Store", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCloudAssetStorerRecorder) Store(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Store", arg0, arg1)
}

// Mock of CloudAssetByIPFetcher interface
type MockCloudAssetByIPFetcher struct {
	ctrl     *gomock.Controller
	recorder *_MockCloudAssetByIPFetcherRecorder
}

// Recorder for MockCloudAssetByIPFetcher (not exported)
type _MockCloudAssetByIPFetcherRecorder struct {
	mock *MockCloudAssetByIPFetcher
}

func NewMockCloudAssetByIPFetcher(ctrl *gomock.Controller) *MockCloudAssetByIPFetcher {
	mock := &MockCloudAssetByIPFetcher{ctrl: ctrl}
	mock.recorder = &_MockCloudAssetByIPFetcherRecorder{mock}
	return mock
}

func (_m *MockCloudAssetByIPFetcher) EXPECT() *_MockCloudAssetByIPFetcherRecorder {
	return _m.recorder
}

func (_m *MockCloudAssetByIPFetcher) FetchByIP(ctx context.Context, when time.Time, ipAddress string) ([]domain.CloudAssetDetails, error) {
	ret := _m.ctrl.Call(_m, "FetchByIP", ctx, when, ipAddress)
	ret0, _ := ret[0].([]domain.CloudAssetDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudAssetByIPFetcherRecorder) FetchByIP(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchByIP", arg0, arg1, arg2)
}

// Mock of CloudAssetByHostnameFetcher interface
type MockCloudAssetByHostnameFetcher struct {
	ctrl     *gomock.Controller
	recorder *_MockCloudAssetByHostnameFetcherRecorder
}

// Recorder for MockCloudAssetByHostnameFetcher (not exported)
type _MockCloudAssetByHostnameFetcherRecorder struct {
	mock *MockCloudAssetByHostnameFetcher
}

func NewMockCloudAssetByHostnameFetcher(ctrl *gomock.Controller) *MockCloudAssetByHostnameFetcher {
	mock := &MockCloudAssetByHostnameFetcher{ctrl: ctrl}
	mock.recorder = &_MockCloudAssetByHostnameFetcherRecorder{mock}
	return mock
}

func (_m *MockCloudAssetByHostnameFetcher) EXPECT() *_MockCloudAssetByHostnameFetcherRecorder {
	return _m.recorder
}

func (_m *MockCloudAssetByHostnameFetcher) FetchByHostname(ctx context.Context, when time.Time, hostname string) ([]domain.CloudAssetDetails, error) {
	ret := _m.ctrl.Call(_m, "FetchByHostname", ctx, when, hostname)
	ret0, _ := ret[0].([]domain.CloudAssetDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCloudAssetByHostnameFetcherRecorder) FetchByHostname(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "FetchByHostname", arg0, arg1, arg2)
}
